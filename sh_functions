# LLM Container Functions

venv() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        -v "$HOME/.cache.docker/uv/:/root/.cache/uv/" \
        -v "$HOME/.cache.docker/pip/:/root/.cache/pip/" \
        "ryanjarv/ubuntu-base" "$@"
}


uv() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -v "$HOME/.cache.docker/uv/:/root/.cache/uv/" \
        -v "$HOME/.cache.docker/pip/:/root/.cache/pip/" \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        --entrypoint='/usr/local/bin/uv' \
        "ryanjarv/ubuntu-base" "$@"
}

uv() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -v "$HOME/.cache.docker:/root/.cache" \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        --entrypoint /usr/local/bin/uv \
        "ryanjarv/ubuntu-base" "$@"
}

python3() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        --entrypoint /usr/local/bin/python3 \
        "ryanjarv/ubuntu-base" "$@"
}

node() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        --entrypoint node \
        "ryanjarv/ubuntu-base" "$@"
}

npm() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        --entrypoint npm \
        "ryanjarv/ubuntu-base" "$@"
}

curl() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        --entrypoint curl \
        "ryanjarv/ubuntu-base" "$@"
}

claude() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -e "IS_SANDBOX=1" \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        -v "$HOME/.claude:/root/.claude" \
        -v "$HOME/.claude.json:/root/.claude.json" \
        -v "$HOME/.claude.json.backup:/root/.claude.json.backup" \
        -v "$HOME/.claude-flow:/root/.claude-flow" \
        "ryanjarv/claude" \
        "--dangerously-skip-permissions" \
        "$@"
}

claude.shell() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -e "IS_SANDBOX=1" \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        -v "$HOME/.claude:/root/.claude" \
        -v "$HOME/.claude.json:/root/.claude.json" \
        -v "$HOME/.claude.json.backup:/root/.claude.json.backup" \
        -v "$HOME/.claude-flow:/root/.claude-flow" \
        --entrypoint bash \
        "ryanjarv/claude"
}

ruv-swarm() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -e "IS_SANDBOX=1" \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        -v "$HOME/.claude:/root/.claude" \
        -v "$HOME/.claude.json:/root/.claude.json" \
        -v "$HOME/.claude.json.backup:/root/.claude.json.backup" \
        -v "$HOME/.claude-flow:/root/.claude-flow" \
        --entrypoint "/usr/bin/ruv-swarm" \
        "ryanjarv/claude" "$@"
}

claude-flow() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -e "IS_SANDBOX=1" \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        -v "$HOME/.claude:/root/.claude" \
        -v "$HOME/.claude.json:/root/.claude.json" \
        -v "$HOME/.claude.json.backup:/root/.claude.json.backup" \
        -v "$HOME/.claude-flow:/root/.claude-flow" \
        --entrypoint "/usr/local/bin/claude-flow" \
        "ryanjarv/claude" \
        "$@"
}

codex() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        -v "$HOME/.codex:/root/.codex" \
        "ryanjarv/codex" \
        --dangerously-bypass-approvals-and-sandbox \
        "$@"
}

codex.shell() {
	root="$(git rev-parse --show-toplevel)" 	
	if [[ -z "$root" ]]; then
		echo "${PWD} is not a git directory"
		return 2
	fi

    docker run --rm -it \
        -v "/tmp:/tmp" \
        -v "$root:$root" -w "$PWD" \
        -v "$HOME/.codex:/root/.codex" \
        --entrypoint sh \
        "ryanjarv/codex"
}

gemini() {
    local service=$1
    shift
    
    docker run --rm -it \
        -v "/tmp:/tmp" \
        -v "$PWD:$PWD" -w "$PWD" \
        "ryanjarv/gemini" \
        "$@"
}
